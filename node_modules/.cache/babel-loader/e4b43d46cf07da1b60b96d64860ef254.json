{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\luis-app\\\\src\\\\components\\\\TimerApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CountUp, { useCountUp } from 'react-countup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TimerApp = () => {\n  _s();\n\n  // const [hour, ] = new Date().toLocaleTimeString(\"en-US\").split(\" \");\n  // const [hours, minutes, seconds] = hour.split(\":\");\n  // console.log(hours, minutes, seconds);\n  const [hour, setHour] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }); // const {hours, minutes, seconds} = hour;\n  // const handleStart = () => {\n  //     setInterval(setTime(), 1000);\n  // }\n  // const setTime = () =>{\n  //     setHour({\n  //         hours: (hours+parseInt(minutes/60)),\n  //         minutes: (minutes+parseInt(seconds/60)%60), \n  //         seconds: (seconds+1)%60\n  //     })\n  // }\n  // const handleStop = () => {\n  //     console.log(\"Stop\")\n  // }\n  // const handleReset = () => {\n  //     setHour({\n  //         hours: 0,\n  //         minutes: 0,\n  //         seconds: 0\n  //     })\n  // }\n\n  const {\n    countUp,\n    start,\n    pauseResume,\n    reset\n  } = useCountUp({\n    duration: 1000,\n    end: 10000\n  });\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"SNOW timer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: `${hours.toLocaleString('en-US', {\n              minimumIntegerDigits: 2,\n              useGrouping: false\n            })}:${minutes.toLocaleString('en-US', {\n              minimumIntegerDigits: 2,\n              useGrouping: false\n            })}:${seconds.toLocaleString('en-US', {\n              minimumIntegerDigits: 2,\n              useGrouping: false\n            })}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: start,\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: pauseResume,\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reset,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(TimerApp, \"nT5Sr7KvPV/7WB31bt4cgND7AdE=\", false, function () {\n  return [useCountUp];\n});\n\n_c = TimerApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerApp\");","map":{"version":3,"sources":["C:/React/luis-app/src/components/TimerApp.js"],"names":["React","useState","CountUp","useCountUp","TimerApp","hour","setHour","hours","minutes","seconds","countUp","start","pauseResume","reset","duration","end","useEffect","toLocaleString","minimumIntegerDigits","useGrouping"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,IAAiBC,UAAjB,QAAkC,eAAlC;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAE1B;AACA;AACA;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAC7BM,IAAAA,KAAK,EAAE,CADsB;AAE7BC,IAAAA,OAAO,EAAE,CAFoB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAAD,CAAhC,CAN0B,CAY1B;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,WAAlB;AAA+BC,IAAAA;AAA/B,MAAyCV,UAAU,CAAC;AAACW,IAAAA,QAAQ,EAAE,IAAX;AAAiBC,IAAAA,GAAG,EAAC;AAArB,GAAD,CAAzD;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,2BACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,iCACI;AAAA,sBAAK;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAA,sBAAM,GAAET,KAAK,CAACU,cAAN,CAAqB,OAArB,EAA8B;AAACC,cAAAA,oBAAoB,EAAE,CAAvB;AAA0BC,cAAAA,WAAW,EAAC;AAAtC,aAA9B,CAA4E,IAAGX,OAAO,CAACS,cAAR,CAAuB,OAAvB,EAAgC;AAACC,cAAAA,oBAAoB,EAAE,CAAvB;AAA0BC,cAAAA,WAAW,EAAC;AAAtC,aAAhC,CAA8E,IAAGV,OAAO,CAACQ,cAAR,CAAuB,OAAvB,EAAgC;AAACC,cAAAA,oBAAoB,EAAE,CAAvB;AAA0BC,cAAAA,WAAW,EAAC;AAAtC,aAAhC,CAA8E;AAAtP;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,OAAO,EAAER,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,YAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,OAAO,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAiBH,CA5DM;;GAAMT,Q;UAqCsCD,U;;;KArCtCC,Q","sourcesContent":["import React, { useState } from 'react'\r\nimport CountUp, {useCountUp} from 'react-countup'\r\n\r\nexport const TimerApp = () => {    \r\n    \r\n    // const [hour, ] = new Date().toLocaleTimeString(\"en-US\").split(\" \");\r\n    // const [hours, minutes, seconds] = hour.split(\":\");\r\n    // console.log(hours, minutes, seconds);\r\n\r\n    const [hour, setHour] = useState({\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0\r\n    });\r\n\r\n    // const {hours, minutes, seconds} = hour;\r\n\r\n    // const handleStart = () => {\r\n    //     setInterval(setTime(), 1000);\r\n    // }\r\n\r\n    // const setTime = () =>{\r\n    //     setHour({\r\n    //         hours: (hours+parseInt(minutes/60)),\r\n    //         minutes: (minutes+parseInt(seconds/60)%60), \r\n    //         seconds: (seconds+1)%60\r\n    //     })\r\n    // }\r\n\r\n    // const handleStop = () => {\r\n    //     console.log(\"Stop\")\r\n    // }\r\n\r\n    // const handleReset = () => {\r\n    //     setHour({\r\n    //         hours: 0,\r\n    //         minutes: 0,\r\n    //         seconds: 0\r\n    //     })\r\n    // }\r\n    const { countUp, start, pauseResume, reset } = useCountUp({duration: 1000, end:10000})\r\n    \r\n    useEffect(() => {\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header text-center\">\r\n                        <h2>{\"SNOW timer\"}</h2>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <h2>{`${hours.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})}:${minutes.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})}:${seconds.toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping:false})}`}</h2>\r\n                        <button onClick={start}>Start</button>\r\n                        <button onClick={pauseResume}>Stop</button>\r\n                        <button onClick={reset}>Reset</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}