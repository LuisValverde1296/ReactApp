{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { calculateTime } from '../helpers/calculateTime';\nexport const useTimer = state => {\n  _s();\n\n  const [hour, setHour] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  useEffect(() => {\n    const interval = setInterval(() => {\n      calculateTime(state.counter).then(time => {\n        if (state.timerOn) {\n          setHour({\n            hours: time.hours,\n            minutes: time.minutes,\n            seconds: time.seconds\n          });\n        }\n      });\n    }, 1000);\n  }, [state]);\n  return hour;\n};\n\n_s(useTimer, \"u/NLRsuziPisSBTahjW0gbXAsMg=\");","map":{"version":3,"sources":["C:/React/luis-app/src/hooks/useTimer.js"],"names":["useEffect","useState","calculateTime","useTimer","state","hour","setHour","hours","minutes","seconds","interval","setInterval","counter","then","time","timerOn"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAC7BM,IAAAA,KAAK,EAAE,CADsB;AAE7BC,IAAAA,OAAO,EAAE,CAFoB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAAD,CAAhC;AAMAT,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BT,MAAAA,aAAa,CAACE,KAAK,CAACQ,OAAP,CAAb,CACKC,IADL,CACWC,IAAI,IAAG;AACV,YAAGV,KAAK,CAACW,OAAT,EAAiB;AACbT,UAAAA,OAAO,CAAC;AACJC,YAAAA,KAAK,EAAEO,IAAI,CAACP,KADR;AAEJC,YAAAA,OAAO,EAAEM,IAAI,CAACN,OAFV;AAGJC,YAAAA,OAAO,EAAEK,IAAI,CAACL;AAHV,WAAD,CAAP;AAKH;AACJ,OATL;AAUH,KAX2B,EAWzB,IAXyB,CAA5B;AAYH,GAdQ,EAcN,CAACL,KAAD,CAdM,CAAT;AAgBA,SAAOC,IAAP;AACH,CAxBM;;GAAMF,Q","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { calculateTime } from '../helpers/calculateTime';\r\n\r\nexport const useTimer = (state) => {\r\n    const [hour, setHour] = useState({\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        const interval = setInterval(() => {\r\n            calculateTime(state.counter)\r\n                .then( time =>{\r\n                    if(state.timerOn){\r\n                        setHour({\r\n                            hours: time.hours,\r\n                            minutes: time.minutes,\r\n                            seconds: time.seconds\r\n                        });\r\n                    }\r\n                } )\r\n        }, 1000);\r\n    }, [state])\r\n\r\n    return hour;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}