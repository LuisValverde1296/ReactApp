{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { calculateBMI } from '../helpers/calculateBMI';\nexport const useBMI = props => {\n  _s();\n\n  const [state, setState] = useState({\n    bmi: 0,\n    status: \"Normal weight\"\n  });\n  useEffect(() => {\n    calculateBMI(props.inputHeight, props.inputWeight).then(state => {\n      if (!isNaN(state.bmi)) {\n        setState({\n          bmi: state.bmi,\n          status: state.status\n        });\n      } else {\n        setState({\n          bmi: 0,\n          status: state.status\n        });\n      }\n    });\n  }, [props]);\n  return state;\n};\n\n_s(useBMI, \"/GIaYGzD66J3uBVegQqHYikVe8o=\");","map":{"version":3,"sources":["C:/React/luis-app/src/hooks/useBMI.js"],"names":["useEffect","useState","calculateBMI","useBMI","props","state","setState","bmi","status","inputHeight","inputWeight","then","isNaN"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAGA,OAAO,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAC/BM,IAAAA,GAAG,EAAE,CAD0B;AAE/BC,IAAAA,MAAM,EAAE;AAFuB,GAAD,CAAlC;AAKAR,EAAAA,SAAS,CAAC,MAAM;AAEZE,IAAAA,YAAY,CAACE,KAAK,CAACK,WAAP,EAAmBL,KAAK,CAACM,WAAzB,CAAZ,CACKC,IADL,CACWN,KAAK,IAAG;AACX,UAAG,CAACO,KAAK,CAACP,KAAK,CAACE,GAAP,CAAT,EAAqB;AACjBD,QAAAA,QAAQ,CAAC;AACLC,UAAAA,GAAG,EAAEF,KAAK,CAACE,GADN;AAELC,UAAAA,MAAM,EAAEH,KAAK,CAACG;AAFT,SAAD,CAAR;AAIH,OALD,MAKM;AACFF,QAAAA,QAAQ,CAAC;AACLC,UAAAA,GAAG,EAAE,CADA;AAELC,UAAAA,MAAM,EAAEH,KAAK,CAACG;AAFT,SAAD,CAAR;AAIH;AACJ,KAbL;AAcC,GAhBI,EAgBF,CAACJ,KAAD,CAhBE,CAAT;AAkBA,SAAOC,KAAP;AACH,CAzBM;;GAAMF,M","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { calculateBMI } from '../helpers/calculateBMI';\r\n\r\n\r\nexport const useBMI = (props) => {\r\n    const [state, setState] = useState({\r\n        bmi: 0,\r\n        status: \"Normal weight\"\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        calculateBMI(props.inputHeight,props.inputWeight)\r\n            .then( state =>{\r\n                if(!isNaN(state.bmi)){\r\n                    setState({\r\n                        bmi: state.bmi,\r\n                        status: state.status\r\n                    });\r\n                } else{\r\n                    setState({\r\n                        bmi: 0,\r\n                        status: state.status\r\n                    });\r\n                }\r\n            } )\r\n        }, [props])\r\n\r\n    return state;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}